name: CI
on:
  workflow_dispatch:
  push:
    branches:
      - master
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  Check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
      - name: Setup Kotlin
        uses: actions/setup-java@v4.0.0
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew --stacktrace check sonar --info

  BuildDocs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
      - name: Build docs
        run: |
          pip install mkdocs
          pip install mkdocs-material
          pip install mkdocs-git-revision-date-localized-plugin
          mkdocs build
      - name: Upload docs
        uses: actions/upload-artifact@v4.0.0
        with:
          path: site/
          name: documentation
      - name: Github Pages Deploy
        uses: peaceiris/actions-gh-pages@v3.9.3
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          publish_dir: site/
          publish_branch: github-actions
  Snyk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
      - name: Snyk Auth
        uses: snyk/actions@0.4.0
        with:
          command: auth
          args: ${{secrets.SNYK_TOKEN}}
      - name: Snyk monitor
        uses: snyk/actions/gradle-jdk17@master
        with:
          command: monitor
  SetUpCaddy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
      - name: Docker login
        uses: docker/login-action@v3.0.0
        with:
          username: davidtca
          password: ${{secrets.DOCKERHUB_TOKEN}}
      - name: Docker build & push
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./caddy
          push: true
          tags: davidtca/caddy-discord:latest
  PrepareImage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
      - name: Setup Kotlin
        uses: actions/setup-java@v4.0.0
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - name: Build Jar
        run: |
          chmod +x ./gradlew
          ./gradlew --no-daemon bootJar
      - name: Publish Jar
        uses: actions/upload-artifact@v4.0.0
        with:
          path: ./build/libs/nolocal.jar
      - name: Publish compose
        uses: actions/upload-artifact@v4.0.0
        with:
          path: ./docker-compose.yml
          name: compose
      - name: Docker login
        uses: docker/login-action@v3.0.0
        with:
          username: davidtca
          password: ${{secrets.DOCKERHUB_TOKEN}}
      - name: Docker build & push
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          push: true
          tags: davidtca/nolocal:latest
  PrepareOracleCLoud:
    runs-on: ubuntu-latest
    outputs:
      ip: ${{ steps.oci.outputs.INSTANCE_IP }}
      created: ${{ steps.oci.outputs.INSTANCE_CREATED }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.1"
      - name: Create Infrastructure
        id : oci
        run: |
          cd pipeline
          pip install oci
          result=( `python create.py  ${{secrets.INFRA_USER_OCID}} ${{secrets.INFRA_FINGERPRINT}} ${{secrets.INFRA_TENANCY}} ${{secrets.INFRA_KEY_CONTENT}} ${{secrets.INFRA_AUTHORIZED_KEYS}}`)
          
          echo "INSTANCE_IP=${result[0]}" >> $GITHUB_OUTPUT
          if ((${#result[@]} > 1));
          then
            echo "INSTANCE_CREATED=true" >> $GITHUB_OUTPUT
          fi
      - name: SSH wait
        run: |
          retry=0
          maxRetries=12
          ssh_host="${{ steps.oci.outputs.INSTANCE_IP }}"
          ssh_key="${{ secrets.INFRA_SSH_PRIVATE_KEY }}" 
          
          echo "$ssh_key" > ssh_key.pem
          chmod 600 ssh_key.pem

          while [ $retry -lt $maxRetries ]; do
              if ssh -o ConnectTimeout=10 -o BatchMode=yes -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$ssh_host "exit"; then
                  echo "SSH connection established."
                  break
              else
                  echo "SSH not available yet, retrying..."
                  sleep 10
                  retry=$((retry+1))
              fi
          done

          if [ $retry -eq $maxRetries ]; then
              echo "SSH connection could not be established after multiple retries."
              exit 1
          fi
          rm ssh_key.pem
      - name: Upload initialization script
        uses: betanzos/scp-upload@v1
        with:
          host: ${{ steps.oci.outputs.INSTANCE_IP  }}
          username: ubuntu
          key: ${{ secrets.INFRA_SSH_PRIVATE_KEY }}
          source: "./pipeline/init.sh"
      - name: Prepare machine
        if: ${{ steps.oci.outputs.INSTANCE_CREATED }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.oci.outputs.INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.INFRA_SSH_PRIVATE_KEY }}
          script: |
            chmod +x init.sh
            ./init.sh

  Deploy:
    runs-on: ubuntu-latest
    needs: [ Check, Snyk, PrepareImage, BuildDocs, PrepareOracleCLoud, SetUpCaddy]
    steps:
      - name: Download the docker-compose file
        uses: actions/download-artifact@v4.1.0
        with:
          name: compose
          path: .
      - name: Push compose using tortilla
        uses: betanzos/scp-upload@v1
        with:
          host: ${{ needs.PrepareOracleCLoud.outputs.ip }}
          username: ubuntu
          key: ${{ secrets.INFRA_SSH_PRIVATE_KEY }}
          source: "./docker-compose.yml"
      - name: Start App
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.PrepareOracleCLoud.outputs.ip }}
          username: ubuntu
          key: ${{ secrets.INFRA_SSH_PRIVATE_KEY }}
          script: |
            echo 'DISCORD_TOKEN=${{secrets.DISCORD_TOKEN}}' > .env
            echo 'AWS_S3_BUCKET=${{secrets.S3_BUCKET_NAME}}' >> .env
            echo 'AWS_S3_ACCESS_KEY_ID=${{secrets.S3_ACCESS_KEY_ID}}' >> .env
            echo 'AWS_S3_SECRET_ACCESS_KEY=${{secrets.S3_ACCESS_SECRET}}' >> .env
            echo 'AWS_S3_URL=${{secrets.S3_URL}}' >> .env
            echo 'S3FS_DEBUG=0' >> .env
            echo 'S3FS_ARGS=use_path_request_style,allow_other' >> .env
            echo 'UID=999' >> .env
            echo 'GID=999' >> .env
            echo 'NEWRELIC_KEY=${{secrets.NEWRELIC_KEY}}' >> .env
            echo 'CLOUD_ORACLE_TENANT=${{secrets.INFRA_TENANCY}}' >> .env
            echo 'CLOUD_ORACLE_USER=${{secrets.INFRA_USER_OCID}}' >> .env
            echo 'CLOUD_ORACLE_FINGERPRINT=${{secrets.INFRA_FINGERPRINT}}' >> .env
            echo 'CLOUD_ORACLE_PRIVATE_KEY=${{secrets.INFRA_SSH_PRIVATE_KEY_B64}}' >> .env
            sudo docker-compose pull -q
            sudo docker-compose up -d nolocal
      - name: Update DuckDNS IP
        run: |
          curl 'https://www.duckdns.org/update?domains=nolocaldisc&token=${{secrets.DUCKDNS_TOKEN}}&ip=${{ needs.PrepareOracleCLoud.outputs.ip }}'
      - name: Start Caddy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.PrepareOracleCLoud.outputs.ip }}
          username: ubuntu
          key: ${{ secrets.INFRA_SSH_PRIVATE_KEY }}
          script: |
            sudo docker-compose up -d caddy
      - name: Start Redis
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.PrepareOracleCLoud.outputs.ip }}
          username: ubuntu
          key: ${{ secrets.INFRA_SSH_PRIVATE_KEY }}
          script: |
            sudo docker compose up -d s3fs
            sudo docker compose up -d redis
